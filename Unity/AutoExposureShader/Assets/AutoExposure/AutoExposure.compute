#pragma warning(disable : 3568)
#pragma exclude_renderers gles gles3 d3d11_9x

#pragma kernel KAutoExposureAvgLuminance_fixed MAIN=KAutoExposureAvgLuminance_fixed
#pragma kernel KAutoExposureAvgLuminance_progressive MAIN=KAutoExposureAvgLuminance_progressive PROGRESSIVE

#include "./Utils/StdLib.hlsl"
#include "./Utils/Builtins/ExposureHistogram.hlsl"

StructuredBuffer<uint> _HistogramBuffer;
Texture2D<float> _Source;
RWTexture2D<float> _Destination;

CBUFFER_START(Params)
    float4 _Params1; // x: lowPercent, y: highPercent, z: minBrightness, w: maxBrightness
    float4 _Params2; // x: speed down, y: speed up, z: exposure compensation, w: delta time
    float4 _ParamsAE1; // Our own added custom parameters (not much is used yet, as still in testing)
    float4 _ParamsAE2; // Our own added custom parameters (not much is used yet, as still in testing)
    float4 _ScaleOffsetRes; // x: scale, y: offset, w: histogram pass width, h: histogram pass height
CBUFFER_END

// Data structure for parallel pyramid reduction
groupshared uint gs_pyramid[HISTOGRAM_REDUCTION_BINS];

// Out own implementation with some parameters to play with
// Using original alternate (commented out) code path with parameters
// Also applying a min/max factor to keep results in a certain range
float GetAdjustedExposureMultiplier(float avgLuminance)
{
    avgLuminance = max(avgLuminance, EPSILON); // between 0.125 and zero/eps (by observation)
    float luminance = _ParamsAE1.w - (_ParamsAE1.z / (2.0 + log(avgLuminance + 1.0) / _ParamsAE1.y));
    float exposure = _ParamsAE1.x * luminance / avgLuminance;
    exposure = pow(abs(exposure * _ParamsAE2.z), _ParamsAE2.w);
    exposure = max(_ParamsAE2.x, min(_ParamsAE2.y, exposure));
    return exposure;
}

// From original function with commented out code path
// That seems to do something more like we want here
// Feel free to draw out the equation in an online grapher:
// y = (1.03 - (2.0 / (2.0 + log2(x + 1.0)))) / x
// Note: regular range for x seems to be 0.15 to 0
float GetAlternateExposureMultiplier(float avgLuminance)
{
    avgLuminance = max(avgLuminance, EPSILON); // between 0.125 and zero/eps (by observation)
    float luminance = 1.03 - (2.0 / (2.0 + log2(avgLuminance + 1.0)));
    float exposure = _ParamsAE1.x * luminance / avgLuminance;
    return exposure;
}

// The original function from unity auto exposure shader
float GetOriginalExposureMultiplier(float avgLuminance)
{
    avgLuminance = max(avgLuminance, EPSILON); // between 0.125 and zero/eps (by observation)
    //float keyValue = 1.03 - (2.0 / (2.0 + log2(avgLuminance + 1.0)));
    float keyValue = _Params2.z;
    float exposure = keyValue / avgLuminance;
    return exposure;
}

// Interpolate exposure from old to new with given time delta
// Ensures changes are more subtle and not instant and abrubt
float InterpolateExposure(float newExposure, float oldExposure)
{
    float delta = newExposure - oldExposure;
    float speed = delta > 0.0 ? _Params2.x : _Params2.y; // speed-down and up
    float exposure = oldExposure + delta * (1.0 - exp2(-_Params2.w * speed)); // w is time.delta
    return exposure;
}

#ifdef DISABLE_COMPUTE_SHADERS
TRIVIAL_COMPUTE_KERNEL(MAIN)
#else

[numthreads(HISTOGRAM_REDUCTION_THREAD_X, HISTOGRAM_REDUCTION_THREAD_Y, 1)]
void MAIN(uint2 groupThreadId : SV_GroupThreadID)
{
    #if HISTOGRAM_REDUCTION_ALT_PATH
    const uint thread_id = groupThreadId.y * HISTOGRAM_REDUCTION_THREAD_X + groupThreadId.x;
    gs_pyramid[thread_id] = max(_HistogramBuffer[thread_id], _HistogramBuffer[thread_id + HISTOGRAM_REDUCTION_BINS]);
    #else
    const uint thread_id = groupThreadId.y * HISTOGRAM_REDUCTION_THREAD_X + groupThreadId.x;
    gs_pyramid[thread_id] = _HistogramBuffer[thread_id];
    #endif

    GroupMemoryBarrierWithGroupSync();

    // Parallel reduction to find the max value
    UNITY_UNROLL
    for (uint i = HISTOGRAM_REDUCTION_BINS >> 1u; i > 0u; i >>= 1u)
    {
        if (thread_id < i) gs_pyramid[thread_id] =
            max(gs_pyramid[thread_id], gs_pyramid[thread_id + i]);
        GroupMemoryBarrierWithGroupSync();
    }

    GroupMemoryBarrierWithGroupSync();

    if (thread_id == 0u)
    {
        float maxValue = 1.0 / float(gs_pyramid[0]);

        float avgLuminance = GetAverageLuminance(_HistogramBuffer, _Params1, maxValue, _ScaleOffsetRes.xy);
        // float exposure = GetOriginalExposureMultiplier(avgLuminance);
        // float exposure = GetAlternateExposureMultiplier(avgLuminance);
        float exposure = GetAdjustedExposureMultiplier(avgLuminance);
        #if PROGRESSIVE
        float prevExposure = _Source[uint2(0u, 0u)].x;
        exposure = InterpolateExposure(exposure, prevExposure);
        #endif

        _Destination[uint2(0u, 0u)] = exposure;
    }
}

#endif // DISABLE_COMPUTE_SHADERS
